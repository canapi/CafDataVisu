@{
    ViewBag.Title = "Parcours allocataire";
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        Parcours web
        <small>- Distribution des visites par rubrique / sous-rubrique et par mois</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="@Url.Action("Index", "Home")"><i class="fa fa-dashboard"></i> Accueil</a></li>
        <li class="active">Parcours web</li>
    </ol>
</section>

<section class="content row">
    <div class="col-md-8">
        <div id="sequence"></div>
        <div id="explanation" style="visibility: hidden">
            <span id="percentage"></span><br/>
            des visites dans la <em>rubrique / sous rubrique</em> suivante.
        </div>
        <div id="chart">
            
        </div>
    </div>
    <div class="col-md-4">
        <div class="box box-info">
            <div class="box-header with-border">
                <h3 class="box-title">Filtres</h3>
            </div><!-- /.box-header -->
            <!-- form start -->
            <form class="form-horizontal">
                <div class="box-body">
                    <div class="form-group">
                        <label for="period" class="col-sm-2 control-label">Période</label>
                        <div class="input-group col-sm-6 date">
                            <input type="text" id="period" class="form-control" value="201505"><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                        </div>
                    </div>
                </div><!-- /.box-body -->
                <div class="box-footer">
                    @*<button type="submit" class="btn btn-default">Cancel</button>
                        <button type="submit" class="btn btn-info pull-right">Sign in</button>*@
                </div><!-- /.box-footer -->
            </form>
        </div>
        <input type="checkbox" id="togglelegend"> Legende<br />
        <div id="legend" style="visibility: hidden;"></div>
    </div>
</section>

<style>


    #sequence {
      width: 600px;
      height: 70px;
    }

    #legend {
      padding: 10px 0 0 3px;
    }

    #sequence text, #legend text {
      font-weight: 600;
      fill: #fff;
    }

    #chart {
      position: relative;
    }

    #chart path {
      stroke: #fff;
    }

    #explanation {
      /*position: absolute;*/
      /*top: 200px;
      left: 305px;*/
      /*width: 140px;*/
      text-align: center;
      color: #666;
      z-index: -1;
    }

    #percentage {
      font-size: 2.5em;
    }

</style>

@section scripts{
    <script>
        $('.input-group.date').datepicker({
            minViewMode: 1,
            format: "yyyymm",
            language: "fr"
        }).on("changeDate", function (e) {
            create();
        });
    </script>


    <script type="text/javascript">

        // Dimensions of sunburst.
        var width = 750;
        var height = 600;
        var radius = Math.min(width, height) / 2;

        // Breadcrumb dimensions: width, height, spacing, width of tip/tail.
        var b = {
            w: 155,
            h: 30,
            s: 3,
            t: 10
        };

        // Mapping of step names to colors.
        var colors = {
            "Accès dossier allocataire (Mon Compte) WEB": "#5687d1"
            , "Téléprocédure Déclaration de ressources WEB": "#7b615c"
            , "Simulation Revenu Solidarité Active et téléprocédure DTRSA WEB": "#de783b"
            , "Simulation PAJE WEB": "#6ab975"
            , "Téléprocédure Changement ou confirmation situation WEB": "#a173d1"
            , "Simulation logement WEB": "#bbbbbb"
            , "Téléprocédure Aide au logement WEB": "#4C94FF"
            , "Courriels WEB": "#4C607F"
            , "Téléprocédure Complément mode de garde Paje WEB": "#00CC9F"
            , "PRIWEB": "#50007F"
            , "Téléprocédure Déclaration conservation ou non logement pendant période estivale WEB": "#FF683B"
            , "Demande code confidentiel WEB": "#CCBE26"
            , "Téléprocédure Déclaration ressources Trimestrielles AAH WEB": "#8BFF2F"
            , "Carte enfant famille WEB (accès uniquement site SNCF)": "#187F3D"
            , "Téléprocédure Certificat de scolarité": "#AAFFEF"
            //"a": "#5687d1",
            //"b": "#7b615c",
            //"c": "#de783b",
            //"account": "#6ab975",
            //"other": "#a173d1",
            //"end": "#bbbbbb"
        };

        // Total size of all segments; we set this later, after loading the data.
        var totalSize = 0;

        var vis;
        var partition;
        var arc;

        create();

        function create() {

            $('#chart').empty();
            $('#legend').empty();

            vis = d3.select("#chart")
                .append("svg:svg")
                .attr("width", width)
                .attr("height", height)
                .append("svg:g")
                .attr("id", "container")
                .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

            partition = d3.layout.partition()
                .size([2 * Math.PI, radius * radius])
                .value(function(d) { return d.size; });

            arc = d3.svg.arc()
                .startAngle(function(d) { return d.x; })
                .endAngle(function(d) { return d.x + d.dx; })
                .innerRadius(function(d) { return Math.sqrt(d.y); })
                .outerRadius(function(d) { return Math.sqrt(d.y + d.dy); });


// Use d3.text and d3.csv.parseRows so that we do not need to have a header
            // row, and can receive the csv as an array of arrays.
            d3.text('@Url.Action("GetDataWeb", "Home")', function(error, text) {
                //createVisualization(json);
                var csv = d3.csv.parseRows(text);
                var jsonval = buildHierarchy(csv);
                createVisualization(jsonval);
            });


        }


// Main function to draw and set up the visualization, once we have the data.
        function createVisualization(json) {

            // Basic setup of page elements.
            initializeBreadcrumbTrail();
            drawLegend();
            d3.select("#togglelegend").on("click", toggleLegend);

            // Bounding circle underneath the sunburst, to make it easier to detect
            // when the mouse leaves the parent g.
            vis.append("svg:circle")
                .attr("r", radius)
                .style("opacity", 0);

            // For efficiency, filter nodes to keep only those large enough to see.
            var nodes = partition.nodes(json)
                .filter(function(d) {
                    return (d.dx > 0.005); // 0.005 radians = 0.29 degrees
                });

            var path = vis.data([json]).selectAll("path")
                .data(nodes)
                .enter().append("svg:path")
                .attr("display", function(d) { return d.depth ? null : "none"; })
                .attr("d", arc)
                .attr("fill-rule", "evenodd")
                .style("fill", function (d) { return colors[d.name] == null ? pastelColors() : colors[d.name]; })
                .style("opacity", 1)
                .on("mouseover", mouseover);

            // Add the mouseleave handler to the bounding circle.
            d3.select("#container").on("mouseleave", mouseleave);

            // Get total size of the tree = value of root node from partition.
            totalSize = path.node().__data__.value;
        };

        function pastelColors() {
            var r = (Math.round(Math.random() * 127) + 127).toString(16);
            var g = (Math.round(Math.random() * 127) + 127).toString(16);
            var b = (Math.round(Math.random() * 127) + 127).toString(16);
            return '#' + r + g + b;
        }

        // Fade all but the current sequence, and show it in the breadcrumb trail.
        function mouseover(d) {

            var percentage = (100 * d.value / totalSize).toPrecision(3);
            var percentageString = percentage + "%";
            if (percentage < 0.1) {
                percentageString = "< 0.1%";
            }

            d3.select("#percentage")
                .text(percentageString);

            d3.select("#explanation")
                .style("visibility", "");

            var sequenceArray = getAncestors(d);
            updateBreadcrumbs(sequenceArray, percentageString);

            // Fade all the segments.
            d3.selectAll("path")
                .style("opacity", 0.3);

            // Then highlight only those that are an ancestor of the current segment.
            vis.selectAll("path")
                .filter(function(node) {
                    return (sequenceArray.indexOf(node) >= 0);
                })
                .style("opacity", 1);
        }

        // Restore everything to full opacity when moving off the visualization.
        function mouseleave(d) {

            // Hide the breadcrumb trail
            d3.select("#trail")
                .style("visibility", "hidden");

            // Deactivate all segments during transition.
            d3.selectAll("path").on("mouseover", null);

            // Transition each segment to full opacity and then reactivate it.
            d3.selectAll("path")
                .transition()
                .duration(1000)
                .style("opacity", 1)
                .each("end", function() {
                    d3.select(this).on("mouseover", mouseover);
                });

            d3.select("#explanation")
                .style("visibility", "hidden");
        }

        // Given a node in a partition layout, return an array of all of its ancestor
        // nodes, highest first, but excluding the root.
        function getAncestors(node) {
            var path = [];
            var current = node;
            while (current.parent) {
                path.unshift(current);
                current = current.parent;
            }
            return path;
        }

        function initializeBreadcrumbTrail() {
            // Add the svg area.
            var trail = d3.select("#sequence").append("svg:svg")
                .attr("width", width)
                .attr("height", 50)
                .attr("id", "trail");
            // Add the label at the end, for the percentage.
            trail.append("svg:text")
                .attr("id", "endlabel")
                .style("fill", "#000");
        }

        // Generate a string that describes the points of a breadcrumb polygon.
        function breadcrumbPoints(d, i) {
            var points = [];
            points.push("0,0");
            points.push(b.w + ",0");
            points.push(b.w + b.t + "," + (b.h / 2));
            points.push(b.w + "," + b.h);
            points.push("0," + b.h);
            if (i > 0) { // Leftmost breadcrumb; don't include 6th vertex.
                points.push(b.t + "," + (b.h / 2));
            }
            return points.join(" ");
        }

        // Update the breadcrumb trail to show the current sequence and percentage.
        function updateBreadcrumbs(nodeArray, percentageString) {

            // Data join; key function combines name and depth (= position in sequence).
            var g = d3.select("#trail")
                .selectAll("g")
                .data(nodeArray, function(d) { return d.name + d.depth; });

            // Add breadcrumb and label for entering nodes.
            var entering = g.enter().append("svg:g");

            entering.append("svg:polygon")
                .attr("points", breadcrumbPoints)
                .style("fill", function(d) { return colors[d.name]; });

            entering.append("svg:text")
                .attr("x", (b.w + b.t) / 2)
                .attr("y", b.h / 2)
                .attr("dy", "0.35em")
                .attr("text-anchor", "middle")
                .text(function(d) {
                    return d.name.substr(0, 20);
                });

            // Set position for entering and updating nodes.
            g.attr("transform", function(d, i) {
                return "translate(" + i * (b.w + b.s) + ", 0)";
            });

            // Remove exiting nodes.
            g.exit().remove();

            // Now move and update the percentage at the end.
            d3.select("#trail").select("#endlabel")
                .attr("x", (nodeArray.length + 0.5) * (b.w + b.s))
                .attr("y", b.h / 2)
                .attr("dy", "0.35em")
                .attr("text-anchor", "middle")
                .text(percentageString);

            // Make the breadcrumb trail visible, if it's hidden.
            d3.select("#trail")
                .style("visibility", "");

        }

        function drawLegend() {

            // Dimensions of legend item: width, height, spacing, radius of rounded rect.
            var li = {
                w: 175,
                h: 30,
                s: 3,
                r: 3
            };

            var legend = d3.select("#legend").append("svg:svg")
                .attr("width", li.w)
                .attr("height", d3.keys(colors).length * (li.h + li.s));

            var g = legend.selectAll("g")
                .data(d3.entries(colors))
                .enter().append("svg:g")
                .attr("transform", function (d, i) {
                    return "translate(0," + i * (li.h + li.s) + ")";
                });

            g.append("svg:rect")
                .attr("rx", li.r)
                .attr("ry", li.r)
                .attr("width", li.w)
                .attr("height", li.h)
                .style("fill", function(d) { return d.value; });

            g.append("svg:text")
                .attr("x", li.w / 2)
                .attr("y", li.h / 2)
                .attr("dy", "0.35em")
                .attr("text-anchor", "middle")
                .text(function(d) { return d.key.substr(0, 20); });

            var g2 = legend.selectAll("g");
            g2.append("svg:title").text(function(d) { return d.key });


        }

        function toggleLegend() {
            var legend = d3.select("#legend");
            if (legend.style("visibility") == "hidden") {
                legend.style("visibility", "");
            } else {
                legend.style("visibility", "hidden");
            }
        }

        // Take a 2-column CSV and transform it into a hierarchical structure suitable
        // for a partition layout. The first column is a sequence of step names, from
        // root to leaf, separated by hyphens. The second column is a count of how
        // often that sequence occurred.
        function buildHierarchy(csv) {
            var dtinputval = $('#period')[0].value;
            var root = { "name": "root", "children": [] };
            for (var i = 0; i < csv.length; i++) {

                var sequence = csv[i][0];
                var size = +csv[i][1];
                if (isNaN(size)) { // e.g. if this is a header row
                    continue;
                }
                var parts = sequence.split("-");
                var dt = parts[0];
                if (dt !== dtinputval)
                    continue;
                var currentNode = root;
                for (var j = 0; j < parts.length; j++) {
                    var children = currentNode["children"];
                    var nodeName = parts[j];
                    var childNode;
                    if (j + 1 < parts.length) {
                        // Not yet at the end of the sequence; move down the tree.
                        var foundChild = false;
                        for (var k = 0; k < children.length; k++) {
                            if (children[k]["name"] == nodeName) {
                                childNode = children[k];
                                foundChild = true;
                                break;
                            }
                        }
                        // If we don't already have a child node for this branch, create it.
                        if (!foundChild) {
                            childNode = { "name": nodeName, "children": [] };
                            children.push(childNode);
                        }
                        currentNode = childNode;
                    } else {
                        // Reached the end of the sequence; create a leaf node.
                        childNode = { "name": nodeName, "size": size };
                        children.push(childNode);
                    }
                }
            }
            return root;
        };

    </script>

}